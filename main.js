/**
 * =================================================================
 * ৩০টি জাভাস্ক্রিপ্ট প্র্যাকটিস সমস্যা (বাংলায়) - বর্ধিত উদাহরণসহ
 * =================================================================
 */

/**
 * সমস্যা ১০: BMI গণনা করুন
 * প্রস্তাবিত ফাংশনের নাম: getBmiCategory()
 *
 * সমস্যা: একজন ব্যক্তির ওজন (কেজি) এবং উচ্চতা (মিটার) থেকে তার BMI (বডি মাস ইনডেক্স) গণনা করুন এবং তার স্বাস্থ্য বিভাগ রিটার্ন করুন।
 * সূত্র: BMI = ওজন / (উচ্চতা * উচ্চতা)। বিভাগ: BMI < 18.5 হলো 'Underweight', 18.5 - 24.9 হলো 'Normal', 25 বা তার বেশি হলো 'Overweight'
 * চ্যালেঞ্জ: যদি ওজন বা উচ্চতা ঋণাত্মক হয়, তবে "Invalid input" রিটার্ন করুন।
 *
 * নমুনা ইনপুট    -> নমুনা আউটপুট
 * (70, 1.75)    -> "Normal"
 * (90, 1.7)     -> "Overweight"
 * (50, 1.65)    -> "Underweight"
 * (-70, 1.75)   -> "Invalid input"
 */


/**
 * সমস্যা ১৯: ক্লাসের গড় স্কোর গণনা
 * প্রস্তাবিত ফাংশনের নাম: getClassAverage()
 *
 * সমস্যা: একজন শিক্ষক তার ক্লাসের গড় স্কোর গণনা করতে চান। এটি করার জন্য একটি ফাংশন লিখুন।
 * চ্যালেঞ্জ: যদি কোনো শিক্ষার্থীর অবজেক্টে `score` প্রপার্টি না থাকে বা স্কোরটি সংখ্যা না হয়, তবে এটিকে গড় গণনা থেকে বাদ দেওয়া উচিত।
 *
 * নমুনা ইনপুট                                                                 -> নমুনা আউটপুট
 * [{ name: "Alice", score: 85 }, { name: "Bob", score: 90 }]               -> 87.5
 * [{ name: "Charlie", score: 70 }, { name: "David" }]                       -> 70
 * [{ name: "Eva", score: 100 }, { name: "Frank", score: "80" }, { name: "Grace", score: 90 }] -> 95
 * []                                                                        -> 0
 */

/**
 * সমস্যা ২০: মাসিক বিদ্যুৎ বিল গণনা
 * প্রস্তাবিত ফাংশনের নাম: calculateElecBill()
 *
 * সমস্যা: ব্যবহারের উপর ভিত্তি করে বিদ্যুৎ বিল গণনা করার জন্য একটি ফাংশন লিখুন।
 * নিয়ম: প্রথম ১০০ ইউনিটের খরচ ৫ টাকা/ইউনিট। ১০১-২০০ ইউনিটের খরচ ৬ টাকা/ইউনিট। ২০০ ইউনিটের উপরে খরচ ৭ টাকা/ইউনিট।
 * চ্যালেঞ্জ: যদি ইনপুট একটি ঋণাত্মক সংখ্যা হয়, তবে "Invalid units" রিটার্ন করুন।
 *
 * নমুনা ইনপুট -> নমুনা আউটপুট
 * 90           -> 450      (90 * 5)
 * 150          -> 800      (100 * 5 + 50 * 6)
 * 250          -> 1450     (100 * 5 + 100 * 6 + 50 * 7)
 * -50          -> "Invalid units"
 */

/**
 * সমস্যা ২১: প্যালিনড্রোম পরীক্ষক
 * প্রস্তাবিত ফাংশনের নাম: isPalindrome()
 *
 * সমস্যা: একটি শব্দ প্যালিনড্রোম (যা সামনে এবং পেছন থেকে একই রকম পড়া যায়) কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন। পরীক্ষাটি কেস-ইনসেনসিটিভ হতে হবে।
 * চ্যালেঞ্জ: স্ট্রিংয়ের যেকোনো স্পেস উপেক্ষা করা উচিত (যেমন, "race car")।
 *
 * নমুনা ইনপুট       -> নমুনা আউটপুট
 * "madam"         -> true
 * "Racecar"       -> true
 * "hello"         -> false
 * "A man a plan a canal Panama" -> true
 */

/**
 * সমস্যা ২২: ক্যাটাগরি অনুযায়ী পণ্য ফিল্টার করুন
 * প্রস্তাবিত ফাংশনের নাম: filterByCategory()
 *
 * সমস্যা: একটি অনলাইন স্টোর ব্যবহারকারীদের ক্যাটাগরি অনুযায়ী পণ্য ফিল্টার করার সুযোগ দিতে চায়। একটি ফাংশন লিখুন যা পণ্যের একটি তালিকা এবং একটি ক্যাটাগরি গ্রহণ করে এবং শুধুমাত্র সেই ক্যাটাগরির পণ্যগুলো রিটার্ন করে।
 * চ্যালেঞ্জ: যদি সেই ক্যাটাগরিতে কোনো পণ্য না পাওয়া যায়, তবে এটি একটি খালি অ্যারে (`[]`) রিটার্ন করা উচিত।
 *
 * নমুনা ইনপুট                                                                                                -> নমুনা আউটপুট
 * [{ name: 'Laptop', category: 'Electronics' }, { name: 'Shirt', category: 'Apparel' }], 'Apparel'           -> [{ name: 'Shirt', category: 'Apparel' }]
 * [{ name: 'Laptop', category: 'Electronics' }, { name: 'Shirt', category: 'Apparel' }], 'Groceries'         -> []
 * [{ name: 'Keyboard', category: 'Electronics' }, { name: 'Mouse', category: 'Electronics' }], 'Electronics' -> [{ name: 'Keyboard', category: 'Electronics' }, { name: 'Mouse', category: 'Electronics' }]
 */

/**
 * সমস্যা ২৩: আয়কর গণনা (কঠিন)
 * প্রস্তাবিত ফাংশনের নাম: calculateIncomeTax()
 *
 * সমস্যা: বার্ষিক আয়ের উপর ভিত্তি করে আয়কর গণনা করার জন্য একটি ফাংশন লিখুন।
 * নিয়ম: প্রথম ৩,০০,০০০ টাকা করমুক্ত। পরবর্তী ১,০০,০০০ টাকার উপর ৫% কর। পরবর্তী ৩,০০,০০০ টাকার উপর ১০% কর। বাকি অংশের উপর ১৫% কর।
 * চ্যালেঞ্জ: যদি ইনপুট ঋণাত্মক বা সংখ্যা না হয়, তবে "Invalid income" রিটার্ন করুন।
 *
 * নমুনা ইনপুট -> নমুনা আউটপুট
 * 250000       -> 0
 * 350000       -> 2500   (50,000 * 5%)
 * 450000       -> 7500   (100,000 * 5% + 50,000 * 10%)
 * 800000       -> 40000  (100,000 * 5% + 300,000 * 10% + 100,000 * 15%)
 */

/**
 * সমস্যা ২৪: সংক্ষিপ্ত নাম তৈরি করুন
 * প্রস্তাবিত ফাংশনের নাম: createAcronym()
 *
 * সমস্যা: একটি প্রতিষ্ঠানের পূর্ণ নাম থেকে একটি সংক্ষিপ্ত নাম (acronym) তৈরি করার জন্য একটি ফাংশন লিখুন।
 * চ্যালেঞ্জ: শব্দগুলোর মধ্যে অতিরিক্ত স্পেস থাকলেও সঠিকভাবে কাজ করা উচিত।
 *
 * নমুনা ইনপুট                                -> নমুনা আউটপুট
 * "World Health Organization"                 -> "WHO"
 * "Bangladesh Krira Shikkha Protishtan"       -> "BKSP"
 * "for your information"                      -> "FYI"
 * "National Aeronautics and Space Administration" -> "NASA"
 */

/**
 * সমস্যা ২৫: জন্মতারিখ থেকে বয়স গণনা
 * প্রস্তাবিত ফাংশনের নাম: calculateAge()
 *
 * সমস্যা: একটি ফাংশন লিখুন যা একজন ব্যবহারকারীর জন্মতারিখ থেকে তার বর্তমান বয়স গণনা করে।
 * ইনপুট: 'YYYY-MM-DD' ফরম্যাটে একটি জন্মতারিখের স্ট্রিং।
 * চ্যালেঞ্জ: যদি জন্মতারিখ ভবিষ্যতে হয়, তবে 0 রিটার্ন করুন।
 *
 * নমুনা ইনপুট  -> নমুনা আউটপুট (যদি আজ 2024-08-15 হয়)
 * "1995-10-25"  -> 28
 * "2005-01-10"  -> 19
 * "2025-01-01"  -> 0
 */

/**
 * সমস্যা ২৬: রানার-আপ খুঁজুন
 * প্রস্তাবিত ফাংশনের নাম: findRunnerUpScore()
 *
 * সমস্যা: একটি দৌড়ে, অংশগ্রহণকারীদের স্কোর একটি অ্যারেতে দেওয়া আছে। রানার-আপ (দ্বিতীয় সর্বোচ্চ স্কোর) খুঁজে বের করার জন্য একটি ফাংশন লিখুন।
 * চ্যালেঞ্জ: যদি অ্যারেতে দুটি বা তার কম স্কোর থাকে, তবে একটি উপযুক্ত বার্তা রিটার্ন করুন।
 *
 * নমুনা ইনপুট        -> নমুনা আউটপুট
 * [10, 20, 15, 18]    -> 18
 * [99, 100, 101, 88]  -> 100
 * [5, 5, 5, 5]        -> "No runner-up found"
 * [10]                -> "Not enough scores"
 */

/**
 * সমস্যা ২৭: আইটেমের সংখ্যা গণনা
 * প্রস্তাবিত ফাংশনের নাম: countItemFrequency()
 *
 * সমস্যা: একজন ফল বিক্রেতা তার ঝুড়িতে প্রতিটি ফল কতগুলো আছে তা গণনা করতে চান। একটি ফাংশন লিখুন যা একটি তালিকায় প্রতিটি ফলের সংখ্যা গণনা করে।
 * আউটপুট: একটি অবজেক্ট যেখানে প্রতিটি কী হলো ফলের নাম এবং ভ্যালু হলো তার সংখ্যা।
 * চ্যালেঞ্জ: যদি ইনপুট অ্যারে খালি থাকে, তবে একটি খালি অবজেক্ট `{}` রিটার্ন করুন।
 *
 * নমুনা ইনপুট                                            -> নমুনা আউটপুট
 * ['apple', 'banana', 'apple', 'orange']                -> { apple: 2, banana: 1, orange: 1 }
 * ['mango', 'mango', 'lichi']                           -> { mango: 2, lichi: 1 }
 * []                                                    -> {}
 */

/**
 * সমস্যা ২৮: ২৪-ঘণ্টা ফরম্যাটকে ১২-ঘণ্টা ফরম্যাটে রূপান্তর
 * প্রস্তাবিত ফাংশনের নাম: convertTo12HourFormat()
 *
 * সমস্যা: একটি ডিজিটাল ঘড়ি ২৪-ঘণ্টা ফরম্যাটে সময় দেখায়। এটিকে AM/PM সহ ১২-ঘণ্টা ফরম্যাটে রূপান্তর করার জন্য একটি ফাংশন লিখুন।
 * ইনপুট: একটি সময় স্ট্রিং (যেমন, "19:30")।
 * আউটপুট: একটি ১২-ঘণ্টার ফরম্যাট স্ট্রিং (যেমন, "07:30 PM")।
 * চ্যালেঞ্জ: "00:00"-কে "12:00 AM" এবং "12:00"-কে "12:00 PM" হিসাবে সঠিকভাবে পরিচালনা করুন।
 *
 * নমুনা ইনপুট -> নমুনা আউটপুট
 * "21:15"      -> "09:15 PM"
 * "08:00"      -> "08:00 AM"
 * "00:45"      -> "12:45 AM"
 * "12:30"      -> "12:30 PM"
 */

/**
 * সমস্যা ২৯: সর্বোচ্চ বেতনের কর্মচারী খুঁজুন
 * প্রস্তাবিত ফাংশনের নাম: findHighestPaidEmployee()
 *
 * সমস্যা: আপনার কাছে কর্মচারী এবং তাদের বেতনের একটি তালিকা আছে। সর্বোচ্চ বেতনের কর্মচারী অবজেক্টটি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।
 * চ্যালেঞ্জ: যদি একাধিক কর্মচারীর সর্বোচ্চ বেতন একই হয়, তবে আপনি প্রথম যাকে পাবেন তাকে রিটার্ন করুন।
 *
 * নমুনা ইনপুট                                                                                        -> নমুনা আউটপুট
 * [{ name: 'Alice', salary: 50000 }, { name: 'Bob', salary: 60000 }]                               -> { name: 'Bob', salary: 60000 }
 * [{ name: 'Charlie', salary: 75000 }, { name: 'David', salary: 75000 }, { name: 'Eve', salary: 70000 }] -> { name: 'Charlie', salary: 75000 }
 * []                                                                                                -> null
 */

/**
 * সমস্যা ৩০: ক্রেডিট কার্ড নম্বর লুকান
 * প্রস্তাবিত ফাংশনের নাম: maskCardNumber()
 *
 * সমস্যা: নিরাপত্তার কারণে, একটি ওয়েবসাইটকে ক্রেডিট কার্ড নম্বরের শুধুমাত্র শেষ ৪টি সংখ্যা দেখাতে হবে। একটি কার্ড নম্বর মাস্ক করার জন্য একটি ফাংশন লিখুন।
 * আউটপুট: একটি মাস্ক করা স্ট্রিং যেখানে প্রথম ১২টি সংখ্যা `*` দ্বারা প্রতিস্থাপিত হয়েছে।
 * চ্যালেঞ্জ: যদি কার্ড নম্বরটি ১৬ সংখ্যার দীর্ঘ না হয়, তবে "Invalid Card Number" রিটার্ন করুন।
 *
 * নমুনা ইনপুট         -> নমুনা আউটপুট
 * "1234567890123456"   -> "************3456"
 * "9876543210987654"   -> "************7654"
 * "12345"              -> "Invalid Card Number"
 * "abcdefghijklmnop"   -> "Invalid Card Number" (কারণ এটি সংখ্যা নয়)
 */
